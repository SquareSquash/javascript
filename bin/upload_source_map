#!/usr/bin/env ruby

# Copyright 2013 Square Inc.
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

require 'optparse'
require 'base64'
require 'zlib'
require 'yaml'

require 'rubygems'
require 'squash/uploader'
require 'squash/javascript'

def git_revision(dir)
  head = File.read(File.join(dir, '.git', 'HEAD')).chomp
  if head =~ /^ref: (.+)$/
    File.read(File.join(dir, '.git', $1)).chomp
  else
    raise "Couldn't determine current revision from #{head.inspect}"
  end
end

project_dir = Dir.getwd
ignore_root = false
revision    = nil
options     = {}
from        = 'hosted'
to          = 'original'

parser = OptionParser.new do |parser|
  parser.banner = "Usage: upload_source_map [options] YOUR_SQUASH_HOST YOUR_API_KEY ENVIRONMENT /path/to/mapping.json"

  parser.on('-f', '--from S', "The type of stack trace element this source map converts from (hosted [default], concatenated, etc.)") { |f| from = f }
  parser.on('-t', '--to S', "The type of stack trace element this source map converts to (compiled, original [default], coffee, etc.)") { |t| to = t }

  parser.on('-o', '--open-timeout N', Integer, "HTTP connection open timeout") { |ot| options[:open_timeout] = ot }
  parser.on('-r', '--read-timeout N', Integer, "HTTP connection data received timeout") { |rt| options[:read_timeout] = rt }
  parser.on('-k', '--[no-]skip-verification', "Do not perform SSL peer verification") { |sv| options[:skip_verification] = sv }

  parser.on('-p', '--project-dir F', "Specify a custom project directory (default current directory)") { |pd| project_dir = pd }
  parser.on('-i', '--[no]-ignore-root', "Ignore the sourceRoot field in the mapping file; always use --project-dir") { |ir| ignore_root = ir }

  parser.on('-r', '--revision R', "Specify a code revision that was deployed (default current revision)") { |r| revision = r }

  parser.on('-h', '--help', "Show this message") { puts parser; exit }
  parser.on('--version', "Display version number of this program") { puts "1.0.0"; exit }
end
parser.parse!(ARGV)

if ARGV.size != 5
  puts parser
  exit 1
end

host        = ARGV.shift
api_key     = ARGV.shift
environment = ARGV.shift
map_file    = ARGV.shift
revision    = revision || git_revision(project_dir)

Squash::Uploader.new(host, options).transmit '/api/1.0/sourcemap.json',
                                             {
                                                 'api_key'     => api_key,
                                                 'environment' => environment,
                                                 'revision'    => revision,
                                                 'sourcemap'   => Base64.encode64(Zlib::Deflate.deflate(File.read(map_file))),
                                                 'from'        => from,
                                                 'to'          => to
                                             }
