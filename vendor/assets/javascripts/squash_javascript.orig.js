// Generated by CoffeeScript 1.4.0
(function() {
  var root, _SquashJavascript,
    __hasProp = {}.hasOwnProperty,
    __slice = [].slice;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.SquashJavascript = (function() {
    var _instance;

    function SquashJavascript() {}

    _instance = void 0;

    SquashJavascript.instance = function() {
      return _instance != null ? _instance : _instance = new _SquashJavascript();
    };

    return SquashJavascript;

  })();

  _SquashJavascript = (function() {
    var ISODateString, any, buildBacktrace, mergeBang;

    function _SquashJavascript() {
      TraceKit.report.subscribe(function(error) {
        return SquashJavascript.instance().report(error);
      });
    }

    _SquashJavascript.prototype.configure = function(options) {
      var key, value, _results;
      this.options || (this.options = {
        disabled: false,
        notifyPath: '/api/1.0/notify',
        transmitTimeout: 15000,
        ignoredExceptionClasses: [],
        ignoredExceptionMessages: {}
      });
      _results = [];
      for (key in options) {
        if (!__hasProp.call(options, key)) continue;
        value = options[key];
        _results.push(this.options[key] = value);
      }
      return _results;
    };

    _SquashJavascript.prototype.notify = function(error) {
      if (error instanceof Error) {
        return TraceKit.report(error);
      } else {
        throw error;
      }
    };

    _SquashJavascript.prototype.report = function(error) {
      var body, fields, matches, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
      try {
        if ((_ref = this.options) != null ? _ref.disabled : void 0) {
          return false;
        }
        if (!((_ref1 = this.options) != null ? _ref1.APIKey : void 0) || !((_ref2 = this.options) != null ? _ref2.environment : void 0) || !((_ref3 = this.options) != null ? _ref3.revision : void 0) || !((_ref4 = this.options) != null ? _ref4.APIHost : void 0)) {
          console.error("Missing required Squash configuration keys");
          return false;
        }
        if (this.shouldIgnoreError(error)) {
          return false;
        }
        if (!error.stack) {
          return false;
        }
        fields = arguments[1] || new Object();
        fields.api_key = this.options.APIKey;
        fields.environment = this.options.environment;
        fields.client = "javascript";
        fields.revision = this.options.revision;
        fields.class_name = error.type || error.name;
        if (!error.name && (matches = error.message.match(/^(Uncaught )?(\w+): (.+)/))) {
          fields.class_name = matches[2];
          fields.message = matches[3];
        } else {
          fields.message = error.message;
        }
        if ((_ref5 = fields.class_name) == null) {
          fields.class_name = 'Error';
        }
        fields.backtraces = buildBacktrace(error.stack);
        fields.capture_method = error.mode;
        fields.occurred_at = ISODateString(new Date());
        fields.schema = window.location.protocol.replace(/:$/, '');
        fields.host = window.location.hostname;
        if (window.location.port.length > 0) {
          fields.port = window.location.port;
        }
        fields.path = window.location.pathname;
        fields.query = window.location.search;
        if (window.location.hash !== '') {
          fields.fragment = window.location.hash;
        }
        fields.user_agent = navigator.userAgent;
        fields.screen_width = screen.width;
        fields.screen_height = screen.height;
        fields.window_width = window.innerWidth;
        fields.window_height = window.innerHeight;
        fields.color_depth = screen.colorDepth;
        body = JSON.stringify(fields);
        this.HTTPTransmit(this.options.APIHost + this.options.notifyPath, [['Content-Type', 'application/json']], body);
        return true;
      } catch (internal_error) {
        console.error("Error while trying to notify Squash:", internal_error.stack);
        return console.error("-- original error:", error);
      }
    };

    _SquashJavascript.prototype.addUserData = function(data, block) {
      var _ref;
      try {
        return block();
      } catch (err) {
        if ((_ref = err._squash_user_data) == null) {
          err._squash_user_data = {};
        }
        mergeBang(err._squash_user_data, data);
        throw err;
      }
    };

    _SquashJavascript.prototype.addingUserData = function(data, block) {
      return function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return SquashJavascript.instance().addUserData(data, function() {
          return block.apply(null, args);
        });
      };
    };

    _SquashJavascript.prototype.ignoreExceptions = function() {
      var block, exceptions, _i;
      exceptions = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), block = arguments[_i++];
      try {
        return block();
      } catch (err) {
        err._squash_ignored_exceptions = (err._squash_ignored_exceptions || []).concat(exceptions);
        throw err;
      }
    };

    _SquashJavascript.prototype.ignoringExceptions = function() {
      var block, exceptions, _i;
      exceptions = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), block = arguments[_i++];
      return function() {
        var args, _ref;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return (_ref = SquashJavascript.instance()).ignoreExceptions.apply(_ref, __slice.call(exceptions).concat([function() {
          return block.apply(null, args);
        }]));
      };
    };

    _SquashJavascript.prototype.HTTPTransmit = function(url, headers, body) {
      var header, request, _i, _len;
      request = new XMLHttpRequest();
      request.timeout = this.options.transmitTimeout;
      request.open("POST", url, true);
      for (_i = 0, _len = headers.length; _i < _len; _i++) {
        header = headers[_i];
        request.setRequestHeader(header[0], header[1]);
      }
      request.send(body);
      return request;
    };

    _SquashJavascript.prototype.shouldIgnoreError = function(error) {
      var ignored_classes;
      ignored_classes = this.options.ignoredExceptionClasses.concat(error._squash_ignored_exceptions || []);
      if (any(ignored_classes, function(klass) {
        return error.name === klass;
      })) {
        return true;
      }
      return any(this.options.ignoredExceptionMessages, function(class_name, messages) {
        if (error.name === class_name) {
          return any(messages, function(message) {
            return error.message.match(message);
          });
        } else {
          return false;
        }
      });
    };

    buildBacktrace = function(stack) {
      var backtraces, context, line, _i, _len;
      backtraces = [];
      for (_i = 0, _len = stack.length; _i < _len; _i++) {
        line = stack[_i];
        context = line.context;
        if (context && any(context, function(cline) {
          return cline.length > 200;
        })) {
          context = null;
        }
        backtraces.push({
          url: line.url,
          line: line.line,
          column: line.column,
          symbol: line.func,
          context: context
        });
      }
      return [
        {
          name: "Active Thread",
          faulted: true,
          backtrace: backtraces
        }
      ];
    };

    ISODateString = function(d) {
      var pad;
      pad = function(n) {
        if (n < 10) {
          return '0' + n;
        } else {
          return n;
        }
      };
      return "" + (d.getUTCFullYear()) + "-" + (pad(d.getUTCMonth() + 1)) + "-" + (pad(d.getUTCDate())) + "T" + (pad(d.getUTCHours())) + ":" + (pad(d.getUTCMinutes())) + ":" + (pad(d.getUTCSeconds())) + "Z";
    };

    any = function(obj, condition) {
      var element, key, value, _i, _len;
      if (obj instanceof Array) {
        for (_i = 0, _len = obj.length; _i < _len; _i++) {
          element = obj[_i];
          if (condition(element)) {
            return true;
          }
        }
      } else {
        for (key in obj) {
          if (!__hasProp.call(obj, key)) continue;
          value = obj[key];
          if (condition(key, value)) {
            return true;
          }
        }
      }
      return false;
    };

    mergeBang = function(modified, constant) {
      var key, value, _results;
      _results = [];
      for (key in constant) {
        if (!__hasProp.call(constant, key)) continue;
        value = constant[key];
        _results.push(modified[key] = value);
      }
      return _results;
    };

    return _SquashJavascript;

  })();

}).call(this);
